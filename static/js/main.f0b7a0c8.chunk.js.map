{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/NavBar/NavBar.js","components/Wrapper/Wrapper.js","components/ClickyCard/ClickyCard.js","components/Grid/Container.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","_ref","children","react_default","a","createElement","className","NavBar","Wrapper","props","ClickyCard","alt","name","height","src","image","onClick","ifClicked","id","Container","fluid","concat","App","state","clickyList","clicky","clicked","count","topScore","message","_this","includes","setState","push","reShuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","_this2","this","components_NavBar_NavBar","href","components_Jumbotron_Jumbotron","Grid_Container","components_Wrapper_Wrapper","map","components_ClickyCard_ClickyCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"inFASeA,SANG,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OAChBC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBJ,KCIWK,SANA,SAAAN,GAAA,IAAGC,EAAHD,EAAGC,SAAH,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbJ,KCAWM,SAFC,SAAAC,GAAK,OAAIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWG,EAAMP,YCS1CQ,SATI,SAAAD,GAAK,OAEtBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKF,EAAMG,KAAMC,OAAO,MAAMC,IAAKL,EAAMM,MAAOC,QAAS,kBAAMP,EAAMQ,UAAUR,EAAMS,WCCjFC,EANG,SAAAlB,GAAA,IAAGmB,EAAHnB,EAAGmB,MAAOlB,EAAVD,EAAUC,SAAV,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAe,OAAcD,EAAQ,SAAW,KAC5ClB,WCkFUoB,oNA1EbC,MAAQ,CACNC,WAAYC,EACZC,QAAS,GACTC,MAAO,EACPC,SAAU,EACVC,QAAS,8BAKXZ,UAAY,SAAAC,GACNY,EAAKP,MAAMG,QAAQK,SAASb,GAC9BY,EAAKE,SAAS,CAAEL,MAAO,EAAGD,QAAS,GAAIG,QAAS,6BAGhDC,EAAKP,MAAMG,QAAQO,KAAKf,GACxBY,EAAKE,SAAS,CAAER,WAAYM,EAAKI,UAAUJ,EAAKP,MAAMC,YAAaG,MAAOG,EAAKP,MAAMI,MAAQ,EAAGE,QAAS,0BACpGC,EAAKP,MAAMI,MAAQ,EAAKG,EAAKP,MAAMK,UAEtCE,EAAKE,SAAS,CAAEJ,SAAUE,EAAKP,MAAMI,MAAQ,QAKnDO,UAAY,SAAAC,GAGV,IAFA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAElB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,2EAGA,IAAAQ,EAAAC,KACP,OACEzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,KACE1C,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAChBH,EAAAC,EAAAC,cAAA,KAAGyC,KAAK,KAAR,gBAAgC3C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAIsC,KAAKrB,MAAMM,SAAa1B,EAAAC,EAAAC,cAAA,oBAAYuC,KAAKrB,MAAMI,MAAvB,iBAA4CiB,KAAKrB,MAAMK,YAGrIzB,EAAAC,EAAAC,cAAC0C,EAAD,KACE5C,EAAAC,EAAAC,cAAA,0BAEAF,EAAAC,EAAAC,cAAA,uFAIFF,EAAAC,EAAAC,cAAC2C,EAAD,KACE7C,EAAAC,EAAAC,cAAC4C,EAAD,KACGL,KAAKrB,MAAMC,WAAW0B,IAAI,SAAAzB,GAAM,OAC/BtB,EAAAC,EAAAC,cAAC8C,EAAD,CACElC,UAAW0B,EAAK1B,UAChBL,KAAMa,EAAOb,KACbwC,IAAK3B,EAAOP,GACZA,GAAIO,EAAOP,GACXH,MAAOU,EAAOV,oBAlEZsC,IAAMC,YCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f0b7a0c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Jumbotron.css\";\r\n\r\nconst Jumbotron = ({ children }) => (\r\n  <header className=\"header\">\r\n   {children}\r\n  </header>\r\n);\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./NavBar.css\";\r\n\r\nconst NavBar = ({ children }) => (\r\n  <nav className=\"navbar\">\r\n   {children}\r\n  </nav>\r\n);\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./ClickyCard.css\";\r\n\r\nconst ClickyCard = props => (\r\n\r\n  <div className=\"card\">\r\n    <div className=\"img-container  shake\">\r\n      <img alt={props.name} height=\"250\" src={props.image} onClick={() => props.ifClicked(props.id)} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ClickyCard;\r\n","import React from \"react\";\r\n\r\nconst Container = ({ fluid, children }) => (\r\n  <div className={`container${fluid ? \"-fluid\" : \"\"}`}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Container;","import React from \"react\";\n\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\nimport NavBar from \"./components/NavBar/NavBar\";\nimport Wrapper from \"./components/Wrapper\";\nimport ClickyCard from \"./components/ClickyCard/ClickyCard\";\nimport Container from \"./components/Grid/Container\";\nimport clicky from \"./clicky.json\";\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  state = {\n    clickyList: clicky,\n    clicked: [],\n    count: 0,\n    topScore: 0,\n    message: \"Click an image to begin!\"\n  };\n\n\n\n  ifClicked = id => {\n    if (this.state.clicked.includes(id)) {\n      this.setState({ count: 0, clicked: [], message: \"You Guessed Incorrectly\" });\n    }\n    else {\n      this.state.clicked.push(id);\n      this.setState({ clickyList: this.reShuffle(this.state.clickyList), count: this.state.count + 1, message: \"You Guessed Correctly\" });\n      if ((this.state.count + 1) > this.state.topScore) {\n\n        this.setState({ topScore: this.state.count + 1 });\n      }\n    }\n  };\n\n  reShuffle = array => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar>\n          <ul><li className=\"brand\">\n            <a href=\"/\">Clicky Game</a></li><li className=\"\">{this.state.message}</li><li>Score: {this.state.count} | Top Score: {this.state.topScore}</li></ul>\n        </NavBar>\n\n        <Jumbotron>\n          <h1>Clicky Game!\n             </h1>\n          <h2>\n            Click on an image to earn points, but don't click on any more than once!\n          </h2>\n        </Jumbotron>\n        <Container>\n          <Wrapper>\n            {this.state.clickyList.map(clicky => (\n              <ClickyCard\n                ifClicked={this.ifClicked}\n                name={clicky.name}\n                key={clicky.id}\n                id={clicky.id}\n                image={clicky.image}\n              />\n            ))}\n          </Wrapper>\n        </Container>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}